//
//  bonus2Main.cpp
//  OpenCV-Template
//
//  Created by Benjamin Therien on 2019-03-23.
//  Copyright Â© 2019 Benjamin Therien. All rights reserved.
//

#include "CornerDescriptor.cpp"
#include <stdio.h>
#include <opencv2/opencv.hpp>
#include <opencv2/xfeatures2d.hpp>
#include <cmath>
#include <iostream>
#include <unistd.h>
#include <vector>


using namespace std;
using namespace cv;

int main()
{
    
    string image1Path = "/Users/BenjaminTherien/Desktop/1/1.jpg";
    Mat img_1 = imread(image1Path, CV_LOAD_IMAGE_COLOR);
    
    string image2Path = "/Users/BenjaminTherien/Desktop/1/2.jpg";
    Mat img_2 = imread(image2Path, CV_LOAD_IMAGE_COLOR);
    
    string image3Path = "/Users/BenjaminTherien/Desktop/1/3.jpg";
    Mat img_3 = imread(image3Path, CV_LOAD_IMAGE_COLOR);
    
    double cThresh = 140, mAThresh = .25, mDThresh = .5, dThresh = 1, iterNum = 3000 ;
    
    Mat dS1, dS2;
    
    //resize(img_1, dS1, Size(0.18*img_1.cols, 0.18 * img_1.rows));
    //resize(img_2, dS1, Size(0.18*img_2.cols, 0.18 * img_2.rows));
    
    
    pyrDown( img_1, dS1, Size( img_1.cols/2, img_1.rows/2 ));
    pyrDown( img_2, dS2, Size( img_2.cols/2, img_2.rows/2 ));
    pyrDown( dS1, img_1, Size( dS1.cols/2, dS1.rows/2 ));
    pyrDown( dS2, img_2, Size( dS2.cols/2, dS2.rows/2 ));
    pyrDown( img_1, img_1, Size( img_1.cols/2, img_1.rows/2 ));
    pyrDown( img_2, img_2, Size( img_2.cols/2, img_2.rows/2 ));
    pyrDown( img_3, img_3, Size( img_3.cols/2, img_3.rows/2 ));
    pyrDown( img_3, img_3, Size( img_3.cols/2, img_3.rows/2 ));
    pyrDown( img_3, img_3, Size( img_3.cols/2, img_3.rows/2 ));
    
    
   // imshow("image", pano(img_1, img_2, cThresh, iterNum, mDThresh, dThresh , mAThresh, true));
    //waitKey(0);
    
    bool a =true;
    
    //getHoms(Mat img_1, Mat img_2, double len, int iterations, double MDFThreshold, double cornerThresh, double anglethresh,  bool show)
    map<String, Mat> oneTo2 = getHoms(img_1, img_2, 155, iterNum, mDThresh, dThresh , mAThresh, a);
    map<String, Mat> twoTo3 = getHoms(img_2, img_3, 155, iterNum, mDThresh, dThresh , mAThresh, a);

    vector<toStitch> images;
    images.push_back(toStitch(img_2, oneTo2["HomInv"] ));
    images.push_back(toStitch(img_3, oneTo2["HomInv"] * twoTo3["HomInv"] ));
    
    StitchedInfo SI = stitchMultiple(img_1 , images);
    
    cout<<"done homs"<<endl;
    addTo(SI, img_1);
    cout<<"done addto"<<endl;
    projectInto(SI, img_2, oneTo2["Hom"]);
    cout<<"done project1"<<endl;
    projectInto(SI, img_3, oneTo2["Hom"] * twoTo3["Hom"]);
 
    
    imshow("image",SI.StitchedImage);
    imwrite("/Users/BenjaminTherien/Desktop/COMP499_Project/mineStitched1.png",SI.StitchedImage);
    waitKey(0);
    return 0;
}
